name: medcom_erp_dev

services:
  db:
    image: postgres:16-alpine
    container_name: medcom_erp_db
    restart: unless-stopped
    ports:
      - "${PG_PORT:-5432}:5432"               # 對外開放
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-medcom}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medcom123}
      POSTGRES_DB: ${POSTGRES_DB:-medcom_erp}
    volumes:
      - pgdata:/var/lib/postgresql/data       # 唯一外置 volume：資料庫
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medcom} -d ${POSTGRES_DB:-medcom_erp}"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [ medcom_net ]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: medcom_erp_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${NEST_PORT:-4000}:4000"             # 對外開放
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-medcom}
      DB_PASS: ${POSTGRES_PASSWORD:-medcom123}
      DB_NAME: ${POSTGRES_DB:-medcom_erp}
      NODE_ENV: development
    working_dir: /app
    volumes:
      - ./backend:/app                        # 直接掛原始碼
    command: ["bash","-lc","tail -f /dev/null"] # 你手動進容器再啟動
    networks: [ medcom_net ]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: medcom_erp_frontend
    restart: unless-stopped
    ports:
      - "${NEXTJS_PORT:-3000}:3000"           # 對外開放
    environment:
      NODE_ENV: development
    working_dir: /app
    volumes:
      - ./frontend:/app                       # 直接掛原始碼
    command: ["bash","-lc","tail -f /dev/null"] # 你手動進容器再啟動
    networks: [ medcom_net ]

volumes:
  pgdata:
    external: true
    name: ${PG_VOLUME_NAME:-medcom_erp_pgdata}

networks:
  medcom_net:
    driver: bridge
